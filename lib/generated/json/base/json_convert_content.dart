// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:mars/models/my_pool_entity.dart';
import 'package:mars/generated/json/my_pool_entity_helper.dart';
import 'package:mars/models/pool_list_entity.dart';
import 'package:mars/generated/json/pool_list_entity_helper.dart';
import 'package:mars/models/poolunder_entity.dart';
import 'package:mars/generated/json/poolunder_entity_helper.dart';
import 'package:mars/models/poolyesterday_entity.dart';
import 'package:mars/generated/json/poolyesterday_entity_helper.dart';
import 'package:mars/models/poolinfo_entity.dart';
import 'package:mars/generated/json/poolinfo_entity_helper.dart';
import 'package:mars/models/back_address_list_entity.dart';
import 'package:mars/generated/json/back_address_list_entity_helper.dart';
import 'package:mars/models/miner_list_entity.dart';
import 'package:mars/generated/json/miner_list_entity_helper.dart';
import 'package:mars/models/ranking_minmax_entity.dart';
import 'package:mars/generated/json/ranking_minmax_entity_helper.dart';
import 'package:mars/models/pool_fil_detail_entity.dart';
import 'package:mars/generated/json/pool_fil_detail_entity_helper.dart';
import 'package:mars/models/public_offerings_entity.dart';
import 'package:mars/generated/json/public_offerings_entity_helper.dart';
import 'package:mars/models/acc_info_entity.dart';
import 'package:mars/generated/json/acc_info_entity_helper.dart';
import 'package:mars/models/pool_lists_entity.dart';
import 'package:mars/generated/json/pool_lists_entity_helper.dart';
import 'package:mars/models/poolcontribution_entity.dart';
import 'package:mars/generated/json/poolcontribution_entity_helper.dart';
import 'package:mars/models/public_offering_entity.dart';
import 'package:mars/generated/json/public_offering_entity_helper.dart';
import 'package:mars/models/pooldetail_entity.dart';
import 'package:mars/generated/json/pooldetail_entity_helper.dart';
import 'package:mars/models/ranking_list_entity.dart';
import 'package:mars/generated/json/ranking_list_entity_helper.dart';
import 'package:mars/models/pool_details_entity.dart';
import 'package:mars/generated/json/pool_details_entity_helper.dart';
import 'package:mars/models/earings_history_entity.dart';
import 'package:mars/generated/json/earings_history_entity_helper.dart';
import 'package:mars/models/pool_detail_entity.dart';
import 'package:mars/generated/json/pool_detail_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case MyPoolEntity:
				return myPoolEntityFromJson(data as MyPoolEntity, json) as T;
			case PoolListEntity:
				return poolListEntityFromJson(data as PoolListEntity, json) as T;
			case PoolListRISE:
				return poolListRISEFromJson(data as PoolListRISE, json) as T;
			case PoolListFIL:
				return poolListFILFromJson(data as PoolListFIL, json) as T;
			case PoolunderEntity:
				return poolunderEntityFromJson(data as PoolunderEntity, json) as T;
			case PoolyesterdayEntity:
				return poolyesterdayEntityFromJson(data as PoolyesterdayEntity, json) as T;
			case PoolinfoEntity:
				return poolinfoEntityFromJson(data as PoolinfoEntity, json) as T;
			case BackAddressListEntity:
				return backAddressListEntityFromJson(data as BackAddressListEntity, json) as T;
			case MinerListEntity:
				return minerListEntityFromJson(data as MinerListEntity, json) as T;
			case RankingMinmaxEntity:
				return rankingMinmaxEntityFromJson(data as RankingMinmaxEntity, json) as T;
			case RankingMinmaxMax:
				return rankingMinmaxMaxFromJson(data as RankingMinmaxMax, json) as T;
			case RankingMinmaxMin:
				return rankingMinmaxMinFromJson(data as RankingMinmaxMin, json) as T;
			case PoolFilDetailEntity:
				return poolFilDetailEntityFromJson(data as PoolFilDetailEntity, json) as T;
			case PoolFilDetailLogList:
				return poolFilDetailLogListFromJson(data as PoolFilDetailLogList, json) as T;
			case PublicOfferingsEntity:
				return publicOfferingsEntityFromJson(data as PublicOfferingsEntity, json) as T;
			case AccInfoEntity:
				return accInfoEntityFromJson(data as AccInfoEntity, json) as T;
			case PoolListsEntity:
				return poolListsEntityFromJson(data as PoolListsEntity, json) as T;
			case PoolListsLogList:
				return poolListsLogListFromJson(data as PoolListsLogList, json) as T;
			case PoolcontributionEntity:
				return poolcontributionEntityFromJson(data as PoolcontributionEntity, json) as T;
			case PublicOfferingEntity:
				return publicOfferingEntityFromJson(data as PublicOfferingEntity, json) as T;
			case PooldetailEntity:
				return pooldetailEntityFromJson(data as PooldetailEntity, json) as T;
			case PooldetailLogList:
				return pooldetailLogListFromJson(data as PooldetailLogList, json) as T;
			case RankingListEntity:
				return rankingListEntityFromJson(data as RankingListEntity, json) as T;
			case PoolDetailsEntity:
				return poolDetailsEntityFromJson(data as PoolDetailsEntity, json) as T;
			case PoolDetailsLogList:
				return poolDetailsLogListFromJson(data as PoolDetailsLogList, json) as T;
			case EaringsHistoryEntity:
				return earingsHistoryEntityFromJson(data as EaringsHistoryEntity, json) as T;
			case PoolDetailEntity:
				return poolDetailEntityFromJson(data as PoolDetailEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case MyPoolEntity:
				return myPoolEntityToJson(data as MyPoolEntity);
			case PoolListEntity:
				return poolListEntityToJson(data as PoolListEntity);
			case PoolListRISE:
				return poolListRISEToJson(data as PoolListRISE);
			case PoolListFIL:
				return poolListFILToJson(data as PoolListFIL);
			case PoolunderEntity:
				return poolunderEntityToJson(data as PoolunderEntity);
			case PoolyesterdayEntity:
				return poolyesterdayEntityToJson(data as PoolyesterdayEntity);
			case PoolinfoEntity:
				return poolinfoEntityToJson(data as PoolinfoEntity);
			case BackAddressListEntity:
				return backAddressListEntityToJson(data as BackAddressListEntity);
			case MinerListEntity:
				return minerListEntityToJson(data as MinerListEntity);
			case RankingMinmaxEntity:
				return rankingMinmaxEntityToJson(data as RankingMinmaxEntity);
			case RankingMinmaxMax:
				return rankingMinmaxMaxToJson(data as RankingMinmaxMax);
			case RankingMinmaxMin:
				return rankingMinmaxMinToJson(data as RankingMinmaxMin);
			case PoolFilDetailEntity:
				return poolFilDetailEntityToJson(data as PoolFilDetailEntity);
			case PoolFilDetailLogList:
				return poolFilDetailLogListToJson(data as PoolFilDetailLogList);
			case PublicOfferingsEntity:
				return publicOfferingsEntityToJson(data as PublicOfferingsEntity);
			case AccInfoEntity:
				return accInfoEntityToJson(data as AccInfoEntity);
			case PoolListsEntity:
				return poolListsEntityToJson(data as PoolListsEntity);
			case PoolListsLogList:
				return poolListsLogListToJson(data as PoolListsLogList);
			case PoolcontributionEntity:
				return poolcontributionEntityToJson(data as PoolcontributionEntity);
			case PublicOfferingEntity:
				return publicOfferingEntityToJson(data as PublicOfferingEntity);
			case PooldetailEntity:
				return pooldetailEntityToJson(data as PooldetailEntity);
			case PooldetailLogList:
				return pooldetailLogListToJson(data as PooldetailLogList);
			case RankingListEntity:
				return rankingListEntityToJson(data as RankingListEntity);
			case PoolDetailsEntity:
				return poolDetailsEntityToJson(data as PoolDetailsEntity);
			case PoolDetailsLogList:
				return poolDetailsLogListToJson(data as PoolDetailsLogList);
			case EaringsHistoryEntity:
				return earingsHistoryEntityToJson(data as EaringsHistoryEntity);
			case PoolDetailEntity:
				return poolDetailEntityToJson(data as PoolDetailEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (MyPoolEntity).toString()){
			return MyPoolEntity().fromJson(json);
		}	else if(type == (PoolListEntity).toString()){
			return PoolListEntity().fromJson(json);
		}	else if(type == (PoolListRISE).toString()){
			return PoolListRISE().fromJson(json);
		}	else if(type == (PoolListFIL).toString()){
			return PoolListFIL().fromJson(json);
		}	else if(type == (PoolunderEntity).toString()){
			return PoolunderEntity().fromJson(json);
		}	else if(type == (PoolyesterdayEntity).toString()){
			return PoolyesterdayEntity().fromJson(json);
		}	else if(type == (PoolinfoEntity).toString()){
			return PoolinfoEntity().fromJson(json);
		}	else if(type == (BackAddressListEntity).toString()){
			return BackAddressListEntity().fromJson(json);
		}	else if(type == (MinerListEntity).toString()){
			return MinerListEntity().fromJson(json);
		}	else if(type == (RankingMinmaxEntity).toString()){
			return RankingMinmaxEntity().fromJson(json);
		}	else if(type == (RankingMinmaxMax).toString()){
			return RankingMinmaxMax().fromJson(json);
		}	else if(type == (RankingMinmaxMin).toString()){
			return RankingMinmaxMin().fromJson(json);
		}	else if(type == (PoolFilDetailEntity).toString()){
			return PoolFilDetailEntity().fromJson(json);
		}	else if(type == (PoolFilDetailLogList).toString()){
			return PoolFilDetailLogList().fromJson(json);
		}	else if(type == (PublicOfferingsEntity).toString()){
			return PublicOfferingsEntity().fromJson(json);
		}	else if(type == (AccInfoEntity).toString()){
			return AccInfoEntity().fromJson(json);
		}	else if(type == (PoolListsEntity).toString()){
			return PoolListsEntity().fromJson(json);
		}	else if(type == (PoolListsLogList).toString()){
			return PoolListsLogList().fromJson(json);
		}	else if(type == (PoolcontributionEntity).toString()){
			return PoolcontributionEntity().fromJson(json);
		}	else if(type == (PublicOfferingEntity).toString()){
			return PublicOfferingEntity().fromJson(json);
		}	else if(type == (PooldetailEntity).toString()){
			return PooldetailEntity().fromJson(json);
		}	else if(type == (PooldetailLogList).toString()){
			return PooldetailLogList().fromJson(json);
		}	else if(type == (RankingListEntity).toString()){
			return RankingListEntity().fromJson(json);
		}	else if(type == (PoolDetailsEntity).toString()){
			return PoolDetailsEntity().fromJson(json);
		}	else if(type == (PoolDetailsLogList).toString()){
			return PoolDetailsLogList().fromJson(json);
		}	else if(type == (EaringsHistoryEntity).toString()){
			return EaringsHistoryEntity().fromJson(json);
		}	else if(type == (PoolDetailEntity).toString()){
			return PoolDetailEntity().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<MyPoolEntity>[] is M){
			return data.map<MyPoolEntity>((e) => MyPoolEntity().fromJson(e)).toList() as M;
		}	else if(<PoolListEntity>[] is M){
			return data.map<PoolListEntity>((e) => PoolListEntity().fromJson(e)).toList() as M;
		}	else if(<PoolListRISE>[] is M){
			return data.map<PoolListRISE>((e) => PoolListRISE().fromJson(e)).toList() as M;
		}	else if(<PoolListFIL>[] is M){
			return data.map<PoolListFIL>((e) => PoolListFIL().fromJson(e)).toList() as M;
		}	else if(<PoolunderEntity>[] is M){
			return data.map<PoolunderEntity>((e) => PoolunderEntity().fromJson(e)).toList() as M;
		}	else if(<PoolyesterdayEntity>[] is M){
			return data.map<PoolyesterdayEntity>((e) => PoolyesterdayEntity().fromJson(e)).toList() as M;
		}	else if(<PoolinfoEntity>[] is M){
			return data.map<PoolinfoEntity>((e) => PoolinfoEntity().fromJson(e)).toList() as M;
		}	else if(<BackAddressListEntity>[] is M){
			return data.map<BackAddressListEntity>((e) => BackAddressListEntity().fromJson(e)).toList() as M;
		}	else if(<MinerListEntity>[] is M){
			return data.map<MinerListEntity>((e) => MinerListEntity().fromJson(e)).toList() as M;
		}	else if(<RankingMinmaxEntity>[] is M){
			return data.map<RankingMinmaxEntity>((e) => RankingMinmaxEntity().fromJson(e)).toList() as M;
		}	else if(<RankingMinmaxMax>[] is M){
			return data.map<RankingMinmaxMax>((e) => RankingMinmaxMax().fromJson(e)).toList() as M;
		}	else if(<RankingMinmaxMin>[] is M){
			return data.map<RankingMinmaxMin>((e) => RankingMinmaxMin().fromJson(e)).toList() as M;
		}	else if(<PoolFilDetailEntity>[] is M){
			return data.map<PoolFilDetailEntity>((e) => PoolFilDetailEntity().fromJson(e)).toList() as M;
		}	else if(<PoolFilDetailLogList>[] is M){
			return data.map<PoolFilDetailLogList>((e) => PoolFilDetailLogList().fromJson(e)).toList() as M;
		}	else if(<PublicOfferingsEntity>[] is M){
			return data.map<PublicOfferingsEntity>((e) => PublicOfferingsEntity().fromJson(e)).toList() as M;
		}	else if(<AccInfoEntity>[] is M){
			return data.map<AccInfoEntity>((e) => AccInfoEntity().fromJson(e)).toList() as M;
		}	else if(<PoolListsEntity>[] is M){
			return data.map<PoolListsEntity>((e) => PoolListsEntity().fromJson(e)).toList() as M;
		}	else if(<PoolListsLogList>[] is M){
			return data.map<PoolListsLogList>((e) => PoolListsLogList().fromJson(e)).toList() as M;
		}	else if(<PoolcontributionEntity>[] is M){
			return data.map<PoolcontributionEntity>((e) => PoolcontributionEntity().fromJson(e)).toList() as M;
		}	else if(<PublicOfferingEntity>[] is M){
			return data.map<PublicOfferingEntity>((e) => PublicOfferingEntity().fromJson(e)).toList() as M;
		}	else if(<PooldetailEntity>[] is M){
			return data.map<PooldetailEntity>((e) => PooldetailEntity().fromJson(e)).toList() as M;
		}	else if(<PooldetailLogList>[] is M){
			return data.map<PooldetailLogList>((e) => PooldetailLogList().fromJson(e)).toList() as M;
		}	else if(<RankingListEntity>[] is M){
			return data.map<RankingListEntity>((e) => RankingListEntity().fromJson(e)).toList() as M;
		}	else if(<PoolDetailsEntity>[] is M){
			return data.map<PoolDetailsEntity>((e) => PoolDetailsEntity().fromJson(e)).toList() as M;
		}	else if(<PoolDetailsLogList>[] is M){
			return data.map<PoolDetailsLogList>((e) => PoolDetailsLogList().fromJson(e)).toList() as M;
		}	else if(<EaringsHistoryEntity>[] is M){
			return data.map<EaringsHistoryEntity>((e) => EaringsHistoryEntity().fromJson(e)).toList() as M;
		}	else if(<PoolDetailEntity>[] is M){
			return data.map<PoolDetailEntity>((e) => PoolDetailEntity().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}